["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$day8.re-frame.async-flow-fx","~:imports",null,"~:requires",["^ ","~$re-frame","~$re-frame.core","^<","^<","~$set","~$clojure.set","^>","^>"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$dissoc-in",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","C:\\Users\\matth\\Documents\\Git\\portal\\resources\\public\\js\\day8\\re_frame\\async_flow_fx.cljs","~:line",7,"~:column",7,"~:end-line",7,"~:end-column",16,"~:arglists",["~#list",["~$quote",["^K",[["~$m",["~$k","~$&","~$ks","~:as","~$keys"]]]]]],"~:doc","Dissociates an entry from a nested associative structure returning a new\n  nested structure. keys is a sequence of keys. Any empty maps that result\n  will not be present in the new structure.\n  The key thing is that 'm' remains identical? to itself if the path was never present"],"^7","~$day8.re-frame.async-flow-fx/dissoc-in","~:variadic",false,"^E","resources\\public\\js\\day8\\re_frame\\async_flow_fx.cljs","^I",16,"~:method-params",["^K",[["~$m","~$p__38669"]]],"~:protocol-impl",null,"~:arglists-meta",["^K",[null,null]],"^G",1,"^F",7,"^H",7,"~:max-fixed-arity",2,"~:fn-var",true,"^J",["^K",["^L",["^K",[["~$m",["~$k","~$&","^M","^N","^O"]]]]]],"^P","Dissociates an entry from a nested associative structure returning a new\n  nested structure. keys is a sequence of keys. Any empty maps that result\n  will not be present in the new structure.\n  The key thing is that 'm' remains identical? to itself if the path was never present"],"~$when->fn",["^ ","^C",null,"^D",["^ ","^E","C:\\Users\\matth\\Documents\\Git\\portal\\resources\\public\\js\\day8\\re_frame\\async_flow_fx.cljs","^F",92,"^G",7,"^H",92,"^I",15,"^J",["^K",["^L",["^K",[["~$when-kw"]]]]]],"^7","~$day8.re-frame.async-flow-fx/when->fn","^R",false,"^E","resources\\public\\js\\day8\\re_frame\\async_flow_fx.cljs","^I",15,"^S",["^K",[["^Z"]]],"^U",null,"^V",["^K",[null,null]],"^G",1,"^F",92,"^H",92,"^W",1,"^X",true,"^J",["^K",["^L",["^K",[["^Z"]]]]]],"~$make-flow-event-handler",["^ ","^C",null,"^D",["^ ","^E","C:\\Users\\matth\\Documents\\Git\\portal\\resources\\public\\js\\day8\\re_frame\\async_flow_fx.cljs","^F",122,"^G",7,"^H",122,"^I",30,"^J",["^K",["^L",["^K",[[["^ ","~:keys",["~$id","~$db-path","~$rules","~$first-dispatch"]]]]]]],"^P","Given a flow definitiion, returns an event handler which implements this definition"],"^7","~$day8.re-frame.async-flow-fx/make-flow-event-handler","^R",false,"^E","resources\\public\\js\\day8\\re_frame\\async_flow_fx.cljs","^I",30,"^S",["^K",[["~$p__38683"]]],"^U",null,"^V",["^K",[null,null]],"^G",1,"^F",122,"^H",122,"^W",1,"^X",true,"^J",["^K",["^L",["^K",[[["^ ","^11",["^12","^13","^14","^15"]]]]]]],"^P","Given a flow definitiion, returns an event handler which implements this definition"],"~$flow->handler",["^ ","^C",null,"^D",["^ ","^E","C:\\Users\\matth\\Documents\\Git\\portal\\resources\\public\\js\\day8\\re_frame\\async_flow_fx.cljs","^F",206,"^G",7,"^H",206,"^I",20,"^J",["^K",["^L",["^K",[["~$flow"]]]]],"^P","Action the given flow effect"],"^7","~$day8.re-frame.async-flow-fx/flow->handler","^R",false,"^E","resources\\public\\js\\day8\\re_frame\\async_flow_fx.cljs","^I",20,"^S",["^K",[["^19"]]],"^U",null,"^V",["^K",[null,null]],"^G",1,"^F",206,"^H",206,"^W",1,"^X",true,"^J",["^K",["^L",["^K",[["^19"]]]]],"^P","Action the given flow effect"],"~$startable-rules",["^ ","^C",null,"^D",["^ ","^E","C:\\Users\\matth\\Documents\\Git\\portal\\resources\\public\\js\\day8\\re_frame\\async_flow_fx.cljs","^F",79,"^G",7,"^H",79,"^I",22,"^J",["^K",["^L",["^K",[["^14","~$now-seen-events","~$rules-fired"]]]]],"^P","Given the accumulated set of seen events and the set of rules already started,\n  return the list of rules which should now be started"],"^7","~$day8.re-frame.async-flow-fx/startable-rules","^R",false,"^E","resources\\public\\js\\day8\\re_frame\\async_flow_fx.cljs","^I",22,"^S",["^K",[["^14","^1<","^1="]]],"^U",null,"^V",["^K",[null,null]],"^G",1,"^F",79,"^H",79,"^W",3,"^X",true,"^J",["^K",["^L",["^K",[["^14","^1<","^1="]]]]],"^P","Given the accumulated set of seen events and the set of rules already started,\n  return the list of rules which should now be started"],"~$seen-all-of?",["^ ","^C",null,"^D",["^ ","^E","C:\\Users\\matth\\Documents\\Git\\portal\\resources\\public\\js\\day8\\re_frame\\async_flow_fx.cljs","^F",62,"^G",7,"^H",62,"^I",19,"^J",["^K",["^L",["^K",[["~$required-events","~$seen-events"]]]]]],"^7","~$day8.re-frame.async-flow-fx/seen-all-of?","^R",false,"^E","resources\\public\\js\\day8\\re_frame\\async_flow_fx.cljs","^I",19,"^S",["^K",[["^1@","^1A"]]],"^U",null,"^V",["^K",[null,null]],"^G",1,"^F",62,"^H",62,"^W",2,"^X",true,"^J",["^K",["^L",["^K",[["^1@","^1A"]]]]]],"~$massage-rules",["^ ","^C",null,"^D",["^ ","^E","C:\\Users\\matth\\Documents\\Git\\portal\\resources\\public\\js\\day8\\re_frame\\async_flow_fx.cljs","^F",98,"^G",7,"^H",98,"^I",20,"^J",["^K",["^L",["^K",[["^14"]]]]],"^P","Massage the supplied rules as follows:\n    - replace `:when` keyword value with a function implementing the predicate\n    - ensure that only `:dispatch` or `:dispatch-n` is provided\n    - add a unique :id, if one not already present"],"^7","~$day8.re-frame.async-flow-fx/massage-rules","^R",false,"^E","resources\\public\\js\\day8\\re_frame\\async_flow_fx.cljs","^I",20,"^S",["^K",[["^14"]]],"^U",null,"^V",["^K",[null,null]],"^G",1,"^F",98,"^H",98,"^W",1,"^X",true,"^J",["^K",["^L",["^K",[["^14"]]]]],"^P","Massage the supplied rules as follows:\n    - replace `:when` keyword value with a function implementing the predicate\n    - ensure that only `:dispatch` or `:dispatch-n` is provided\n    - add a unique :id, if one not already present"],"~$as-callback-pred",["^ ","^C",null,"^D",["^ ","^E","C:\\Users\\matth\\Documents\\Git\\portal\\resources\\public\\js\\day8\\re_frame\\async_flow_fx.cljs","^F",23,"^G",7,"^H",23,"^I",23,"^J",["^K",["^L",["^K",[["~$callback-pred"]]]]],"^P","Looks at the required-events items and returns a predicate which\n  will either\n  - match only the event-keyword if a keyword is supplied\n  - match the entire event vector if a collection is supplied\n  - returns a callback-pred if it is a fn"],"^7","~$day8.re-frame.async-flow-fx/as-callback-pred","^R",false,"^E","resources\\public\\js\\day8\\re_frame\\async_flow_fx.cljs","^I",23,"^S",["^K",[["^1F"]]],"^U",null,"^V",["^K",[null,null]],"^G",1,"^F",23,"^H",23,"^W",1,"^X",true,"^J",["^K",["^L",["^K",[["^1F"]]]]],"^P","Looks at the required-events items and returns a predicate which\n  will either\n  - match only the event-keyword if a keyword is supplied\n  - match the entire event vector if a collection is supplied\n  - returns a callback-pred if it is a fn"],"~$ensure-has-id",["^ ","^C",null,"^D",["^ ","^E","C:\\Users\\matth\\Documents\\Git\\portal\\resources\\public\\js\\day8\\re_frame\\async_flow_fx.cljs","^F",194,"^G",8,"^H",194,"^I",21,"~:private",true,"^J",["^K",["^L",["^K",[["^19"]]]]],"^P","Ensure `flow` has an id. Return a vector of [id flow]."],"^1I",true,"^7","~$day8.re-frame.async-flow-fx/ensure-has-id","^R",false,"^E","resources\\public\\js\\day8\\re_frame\\async_flow_fx.cljs","^I",21,"^S",["^K",[["^19"]]],"^U",null,"^V",["^K",[null,null]],"^G",1,"^F",194,"^H",194,"^W",1,"^X",true,"^J",["^K",["^L",["^K",[["^19"]]]]],"^P","Ensure `flow` has an id. Return a vector of [id flow]."],"~$seen-any-of?",["^ ","^C",null,"^D",["^ ","^E","C:\\Users\\matth\\Documents\\Git\\portal\\resources\\public\\js\\day8\\re_frame\\async_flow_fx.cljs","^F",70,"^G",7,"^H",70,"^I",19,"^J",["^K",["^L",["^K",[["^1@","^1A"]]]]]],"^7","~$day8.re-frame.async-flow-fx/seen-any-of?","^R",false,"^E","resources\\public\\js\\day8\\re_frame\\async_flow_fx.cljs","^I",19,"^S",["^K",[["^1@","^1A"]]],"^U",null,"^V",["^K",[null,null]],"^G",1,"^F",70,"^H",70,"^W",2,"^X",true,"^J",["^K",["^L",["^K",[["^1@","^1A"]]]]]],"~$map-when->fn",["^ ","^7","~$day8.re-frame.async-flow-fx/map-when->fn","^E","resources\\public\\js\\day8\\re_frame\\async_flow_fx.cljs","^F",87,"^G",1,"^H",87,"^I",18,"^D",["^ ","^E","C:\\Users\\matth\\Documents\\Git\\portal\\resources\\public\\js\\day8\\re_frame\\async_flow_fx.cljs","^F",87,"^G",6,"^H",87,"^I",18],"~:tag","~$cljs.core/IMap"]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:seen?","~:unregister","~:seen-all-of?","~:first-dispatch","~:rules-fired","~:else","~:when","~:db","~:seen-events","~:events","~:forward-events","~:dispatch-n","~:db-path","~:deregister-event-handler","~:rules","~:dispatch-to","~:setup","~:dispatch","~:seen-both?","~:callback-pred","~:register","~:id","~:seen-any-of?","~:error","~:halt?","~:async-flow"]],"~:order",["^1Z","^2<","^23","^1V","^2=","^22","^28","^2@","^1[","^2>","^1U","^2;","^1W","^2?","^2:","^24","^2A","^25","^27","^1X","^21","^1Y","^20","^29","^26","^2B"]],"^P",null]